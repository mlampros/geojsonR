export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/geomcol.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/MPOLY.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/FEATURE.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/FEATURECOLLECTION.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/california.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/test_so.geojson"
microbenchmark::microbenchmark(jsonlite::read_json(FILE),
export_From_geojson_schema(FILE, "geometry", F, F),
export_From_geojson_schema(FILE, ""),
export_From_geojson_schema(FILE, "geometry", F, T))
FILE = "/home/lampros/Downloads/tmp.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
export_From_geojson_schema(FILE, "geometry", F, T)
FILE = "/home/lampros/Downloads/geomcol.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
export_From_geojson_schema(FILE, "geometry", F, T)
FILE = "/home/lampros/Downloads/MPOLY.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
export_From_geojson_schema(FILE, "geometry", F, T)
FILE = "/home/lampros/Downloads/FEATURE.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
export_From_geojson_schema(FILE, "geometry", F, T)
FILE = "/home/lampros/Downloads/FEATURECOLLECTION.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
export_From_geojson_schema(FILE, "geometry", F, T)
FILE = "/home/lampros/Downloads/california.geojson"
export_From_geojson_schema(FILE, "geometry", F, F)
res = export_From_geojson_schema(FILE, "geometry", F, F)
str(res)
res = export_From_geojson_schema(FILE, "geometry", F, T)
str(res)
py_str = "
x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())
"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_str = "x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_str = "x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_str = "x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_str = "x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(x.items() + y.items())"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_str = "x = {'a':1, 'b': 2}
y = {'b':10, 'c': 11}
z = dict(list(x.items()) + list(y.items()))"
reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_dict = reticulate::py_run_string(code = py_str, local = FALSE, convert = TRUE)
py_dict$z
py_dict = reticulate::py_run_string(code = py_str, local = FALSE, convert = FALSE)
py_dict$z
install.packages("fuzzywuzzyR")
A = "blahmatchblah"
B = "match"
C = "latch"
library(fuzzywuzzyR)
init <- SequenceMatcher$new(string1 = NULL, string2 = NULL)
init <- SequenceMatcher$new(string1 = A, string2 = B)
init$get_matching_blocks()
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD check --as-cran geojsonR_1.0.2.tar.gz")
FILE = '/home/lampros/ADD_GITHUB/geojsonR.Rcheck/tests/testthat/file_data/Feature.geojson'
PATH = '/home/lampros/ADD_GITHUB/geojsonR.Rcheck/tests/testthat/file_data/Feature.geojson'
Rcpp::sourceCpp('geojsonR/src/FROM_geojson.cpp')
source('~/ADD_GITHUB/geojsonR/R/utils.R')
tmp = FROM_GeoJson(url_file_string = PATH)
nams = sum(names(tmp) %in% c("bbox", "geometry", "id", "properties", "type")) == 5
nams
obj = tmp$type == "Feature"
obj
len = sum(dim(tmp$geometry$coordinates) == c(1, 2)) == 2
len
tmp
dim(tmp$geometry$coordinates)
dim(tmp$geometry$coordinates)
length(tmp$geometry$coordinates)
length(tmp$geometry$coordinates) == 2
len = length(tmp$geometry$coordinates) == 2
sum(c(nams, obj, len)) == 3
dim(tmp_OUT$geometry$coordinates)
tmp = Dump_From_GeoJson(url_file = PATH)
tmp_OUT = FROM_GeoJson(url_file_string = tmp)
nams = sum(names(tmp_OUT) %in% c("bbox", "geometry", "id", "properties", "type")) == 5
obj = tmp_OUT$type == "Feature"
nams
obj
dim(tmp_OUT$geometry$coordinates)
length(tmp_OUT$geometry$coordinates)
len = length(tmp_OUT$geometry$coordinates) == 2
sum(c(nams, obj, len)) == 3
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD check --as-cran geojsonR_1.0.2.tar.gz")
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD check --as-cran geojsonR_1.0.2.tar.gz")
system("R CMD INSTALL geojsonR_1.0.2.tar.gz")
PATH = '/home/lampros/Downloads/tmp.geojson'
geojsonR::FROM_GeoJson(PATH, To_List = F)
geojsonR::FROM_GeoJson(PATH, To_List = T)
microbenchmark::microbenchmark(geojsonR::FROM_GeoJson(PATH, To_List = F), geojsonR::FROM_GeoJson(PATH, To_List = T))
PATH = '/home/lampros/Downloads/california.geojson'
geojsonR::FROM_GeoJson(PATH, To_List = F)
geojsonR::FROM_GeoJson(PATH, To_List = T)
microbenchmark::microbenchmark(geojsonR::FROM_GeoJson(PATH, To_List = F), geojsonR::FROM_GeoJson(PATH, To_List = T))
PATH = '/home/lampros/Downloads/tes_so.geojson'
PATH = '/home/lampros/Downloads/test_so.geojson'
microbenchmark::microbenchmark(geojsonR::FROM_GeoJson(PATH, To_List = F), geojsonR::FROM_GeoJson(PATH, To_List = T))
PATH = '/home/lampros/MongoReticulate/GEOJSON/geo1.geojson'
geojsonR::FROM_GeoJson(PATH, To_List = F)
geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'location', To_List = F)
geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'location', To_List = T)
microbenchmark::microbenchmark(jsonlite::read_json(PATH), geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'location', To_List = F), geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'location', To_List = T))
PATH = '/home/lampros/Downloads/mongo_data.geojson'
geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'location', To_List = F)
geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'geometry', To_List = F)
geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'geometry', To_List = T)
microbenchmark::microbenchmark(jsonlite::read_json(PATH), geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'geometry', To_List = F), geojsonR::FROM_GeoJson_Schema(PATH, geometry_name = 'geometry', To_List = T))
schema_str = '{
"name" : "example_name",
"location" : {
"type" : "Point",
"coordinates" : [ -120.24, 39.21 ]
}
}'
schema_str
tmp = geojsonR::FROM_GeoJson_Schema(url_file_string = schema_str, geometry_name = "location")
tmp
names(tmp)
nams = sum(names(tmp) %in% c("location", "name")) == 2
nams
obj = tmp$type == "Point"
obj
obj
tmp$type
obj = tmp$location$type == "Point"
obj
len = length(tmp$location$coordinates) == 2
len
sum(c(nams, obj, len)) == 3
PATH = '/home/lampros/Downloads/mongo_data.geojson'
f = geojsonR::FROM_GeoJson_Schema(PATH, "geometry")
str(f)
names(f)
dput(names(f))
tmp = FROM_GeoJson_Schema(url_file_string = PATH, geometry_name = "geometry")
tmp = geojsonR::FROM_GeoJson_Schema(url_file_string = PATH, geometry_name = "geometry")
nams = sum(names(tmp) %in% c("_id", "geometry", "name")) == 3
nams
obj = tmp$geometry$type == "Polygon"
obj
dim(tmp$geometry$coordinates)
dim(tmp$geometry$coordinates) == c(4649, 2)
len = sum(dim(tmp$geometry$coordinates) == c(4649, 2)) == 2
len
sum(c(nams, obj, len)) == 3
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD check --as-cran geojsonR_1.0.2.tar.gz")
system("R CMD INSTALL geojsonR_1.0.2.tar.gz")
dat = geojsonR::FROM_GeoJson('https://raw.githubusercontent.com/harsha2010/magellan/master/examples/datasets/NYC-NEIGHBORHOODS/neighborhoods.geojson')
str(dat)
microbenchmark::microbenchmark(jsonlite::fromJSON('https://raw.githubusercontent.com/harsha2010/magellan/master/examples/datasets/NYC-NEIGHBORHOODS/neighborhoods.geojson'), geojsonR::FROM_GeoJson('https://raw.githubusercontent.com/harsha2010/magellan/master/examples/datasets/NYC-NEIGHBORHOODS/neighborhoods.geojson'), times = 5)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson'), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 5)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson'), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 50)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson', simply), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 5)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson', simplifyVector = T), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 5)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson', simplifyVector = F), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 5)
microbenchmark::microbenchmark(jsonlite::fromJSON('/home/lampros/Downloads/neighborhoods.geojson', simplifyVector = F), geojsonR::FROM_GeoJson('/home/lampros/Downloads/neighborhoods.geojson'), times = 50)
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
fl = read_file("/home/lampros/taxidata/trip_data/trip_data_1.csv", read_file_delimiter = ',')
length(fl)
class(fl)
head(fl)
fl[[1]]
fl = read_file("/home/lampros/taxidata/trip_data/trip_data_1.csv")
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
Rcpp::sourceCpp('src/parse_csv.cpp')
fl = getNextLineAndSplitIntoTokens("/home/lampros/taxidata/trip_data/trip_data_1.csv")
fl
fl = read_file("/home/lampros/taxidata/trip_data/trip_data_1.csv", read_file_delimiter = '\n')
length(fl)
head(fl)
Rcpp::sourceCpp('src/parse_csv.cpp')
fl = read_file("/home/lampros/taxidata/trip_data/trip_data_1.csv", read_file_delimiter = '\n')
fl = read_file("/home/lampros/taxidata/trip_data/trip_data_1.csv")
length(fl)
fl[[1]]
fl[[2]]
dtbl = data.table::rbindlist(fl)
str(fl)
Rcpp::sourceCpp('~/Downloads/tes2.cpp')
Rcpp::sourceCpp('~/Downloads/tes2.cpp')
Rcpp::sourceCpp('~/Downloads/tes2.cpp')
list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
geojsonR::shiny_from_JSON('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/2016-01-04-7.json')
geojsonR::shiny_from_JSON('/home/lampros/Downloads/GITHUB_ARCHIVE/FILE.json')
geojsonR::shiny_from_JSON('/home/lampros/Downloads/GITHUB_ARCHIVE/FILE.txt')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
Rcpp::sourceCpp('src/FROM_geojson.cpp')
st = Sys.time(); tmp = merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json"); end = Sys.time(); end - st;
a = list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files')
a = list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files')
a
aa = list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files'), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T), times = 10)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files'), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T), times = 100)
list.files
list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files')
list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files'), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T), times = 100)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files'), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = T), times = 100)
list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full_path = F)
list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = F)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full_path = F), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = F), times = 100)
microbenchmark::microbenchmark(list_files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full_path = F), list.files('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files', full.names = F), times = 100)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
list_files("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1")
list_files("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/")
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", concat_delimiter = "\n" verbose = T)
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", concat_delimiter = "\n", verbose = T)
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", concat_delimiter = "\n", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
readLines('/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files12016-01-01-0.json')
PATH = '/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files12016-01-01-0.json'
con <- file(PATH,open="r")
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json")
OUTPUT_FILE = "some_file"
paste('the', OUTPUT_FILE, "already exists. New data will be added to the end of the file!", sep = " ")
paste('the', OUTPUT_FILE, "file already exists. New data will be added to the end of the file!", sep = " ")
paste('the "', OUTPUT_FILE, '" file already exists. New data will be added to the end of the "', OUTPUT_FILE, '" !', sep = "")
paste("the '", OUTPUT_FILE, "' file already exists. New data will be added to the end of the '", OUTPUT_FILE, "' !", sep = "")
warning(paste("the '", OUTPUT_FILE, "' file already exists. New data will be added to the end of '", OUTPUT_FILE, "' !", sep = ""), call. = F)
output = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1"
output
strsplit(output, "\")
}
?strsplit
strsplit(output, "\\\")
strsplit(output, "/")
str_SPL = strsplit(output, "")[[1]]
str_SPL
str_SPL[nchar(output)]
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/OUTPUT.json")
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose)
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
Rcpp::sourceCpp('src/FROM_geojson.cpp')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_json("/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files1/", "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json", verbose = T)
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n", verbose = T)
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n", verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n", verbose = T)
setwd('/home/lampros/ADD_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/Downloads/GITHUB_ARCHIVE/tmp_files/",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n", verbose = T)
geojsonR::merge_files(INPUT_FOLDER = "/media/lampros/981E-02B1/multiple_files/",
OUTPUT_FILE = "/home/lampros/Downloads/GITHUB_ARCHIVE/OUTPUT.json",
CONCAT_DELIMITER = "\n", verbose = T)
library(geojsonR)
merge_files(INPUT_FOLDER = NULL, OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = "\n", verbose = FALSE)
testthat::test_that("in case that the 'INPUT_FOLDER' parameter is not a character string it returns an error", {
testthat::expect_error( merge_files(INPUT_FOLDER = NULL, OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = "\n", verbose = FALSE) )
})
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = NULL, CONCAT_DELIMITER = "\n", verbose = FALSE)
testthat::test_that("in case that the 'OUTPUT_FILE' parameter is not a character string it returns an error", {
testthat::expect_error( merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = NULL, CONCAT_DELIMITER = "\n", verbose = FALSE) )
})
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = NULL, verbose = FALSE)
testthat::test_that("in case that the 'CONCAT_DELIMITER' parameter is not a character string it returns an error", {
testthat::expect_error( merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = NULL, verbose = FALSE) )
})
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = "\n", verbose = NULL)
detach("package:geojsonR", unload=TRUE)
source('~/ADD_GITHUB/geojsonR/R/utils.R')
Rcpp::sourceCpp('src/FROM_geojson.cpp')
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = "\n", verbose = NULL)
testthat::test_that("in case that the 'verbose' parameter is not a boolean it returns an error", {
testthat::expect_error( merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/path", CONCAT_DELIMITER = "\n", verbose = NULL) )
})
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/file.json", CONCAT_DELIMITER = "\n", verbose = FALSE)
testthat::test_that("in case that the 'INPUT_FOLDER' parameter does not end in slash it returns an error", {
testthat::expect_error( merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = "/valid/file.json", CONCAT_DELIMITER = "\n", verbose = FALSE) )
})
PATH_file_exists = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/file_exists.json"
merge_files(INPUT_FOLDER = "/valid/path", OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
merge_files(INPUT_FOLDER = "/valid/path/", OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
testthat::test_that("in case that the 'OUTPUT_FILE' already exists it returns a warning", {
PATH_file_exists = paste0(getwd(), path.expand("/file_exists.json"))
testthat::expect_warning( merge_files(INPUT_FOLDER = "/valid/path/", OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE) )
})
PATH_file_exists
PATH_folder_exists = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/merge_folder/"
merge_files(INPUT_FOLDER = PATH_folder_exists, OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
?file.create
getwd()
PATH = "/home/lampros/Downloads"
#file.create(PATH, showWarnings = F)
PATH = "/home/lampros/Downloads/some_file.json"
file.create(PATH, showWarnings = F)
file.remove(PATH, showWan)
file.remove(PATH)
getwd()
setwd('/home/lampros/ADD_GITHUB/geojsonR/tests/testthat')
temporary_function() {
PATH_folder_exists = paste0(getwd(), path.expand("/merge_folder/"))
PATH_file_exists = paste0(getwd(), path.expand("/file_exists.json"))
file.create(PATH_file_exists, showWarnings = F)
merge_files(INPUT_FOLDER = PATH_folder_exists, OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
file.remove(PATH_file_exists)
}
temporary_function = function() {
PATH_folder_exists = paste0(getwd(), path.expand("/merge_folder/"))
PATH_file_exists = paste0(getwd(), path.expand("/file_exists.json"))
file.create(PATH_file_exists, showWarnings = F)
merge_files(INPUT_FOLDER = PATH_folder_exists, OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
file.remove(PATH_file_exists)
}
temporary_function()
PATH_file_exists
file.remove(PATH_file_exists)
'/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/file_exists.json'
file.exists(PATH_file_exists)
getwd()
temporary_function = function() {
PATH_folder_exists = paste0(getwd(), path.expand("/merge_folder/"))
PATH_file_exists = paste0(getwd(), path.expand("/file_exists.json"))
file.create(PATH_file_exists, showWarnings = F)
merge_files(INPUT_FOLDER = PATH_folder_exists, OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
file.remove(PATH_file_exists)
}
temporary_function()
testthat::test_that("in case that the 'OUTPUT_FILE' already exists it returns a warning", {
temporary_function = function() {
PATH_folder_exists = paste0(getwd(), path.expand("/merge_folder/"))
PATH_file_exists = paste0(getwd(), path.expand("/file_exists.json"))
file.create(PATH_file_exists, showWarnings = F)
merge_files(INPUT_FOLDER = PATH_folder_exists, OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
file.remove(PATH_file_exists)
}
testthat::expect_warning( temporary_function() )
})
devtools::document(pkg = '/home/lampros/ADD_GITHUB/geojsonR')
setwd('/home/lampros/ADD_GITHUB/geojsonR')
tools::package_native_routine_registration_skeleton(".", character_only = FALSE)
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/ADD_GITHUB/')
system("R CMD build geojsonR")
system("R CMD build geojsonR")
system("R CMD check --as-cran geojsonR_1.0.3.tar.gz")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
covr::shine(covr::package_coverage(path = '/home/lampros/ADD_GITHUB/geojsonR', type = "tests", quiet = F))
install.packages("DT")
covr::shine(covr::package_coverage(path = '/home/lampros/ADD_GITHUB/geojsonR', type = "tests", quiet = F))
library(geojsonR)
merge_files(INPUT_FOLDER = "/valid/path/", OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
PATH_file_exists = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/file_exists.json"
merge_files(INPUT_FOLDER = "/valid/path/", OUTPUT_FILE = PATH_file_exists, CONCAT_DELIMITER = "\n", verbose = FALSE)
covr::shine(covr::package_coverage(path = '/home/lampros/ADD_GITHUB/geojsonR', type = "tests", quiet = F))
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/merge_folder/", OUTPUT_FILE = "/home/lampros/Pictures/OUTPUT.json", CONCAT_DELIMITER = "\n", verbose = T)
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/merge_folder/", OUTPUT_FILE = "/home/lampros/Pictures/OUTPUT.json", CONCAT_DELIMITER = "", verbose = T)
geojsonR::merge_files(INPUT_FOLDER = "/home/lampros/ADD_GITHUB/geojsonR/tests/testthat/merge_folder/", OUTPUT_FILE = "/home/lampros/Pictures/OUTPUT.json", CONCAT_DELIMITER = " ", verbose = T)
devtools::document(pkg = '/home/lampros/Desktop/kaggle_gpu/add_GITHUB/geojsonR')
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/geojsonR')
Rcpp::compileAttributes(verbose = T)
tools::package_native_routine_registration_skeleton(".")
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/')
system("R CMD build geojsonR")
system("R CMD check --as-cran --use-valgrind geojsonR_1.0.3.tar.gz")
system("R CMD INSTALL geojsonR_1.0.3.tar.gz")
devtools::document(pkg = '/home/lampros/Desktop/kaggle_gpu/add_GITHUB/TMP_FOLDER/geojsonR')
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/TMP_FOLDER/geojsonR')
Rcpp::compileAttributes(verbose = T)
setwd('/home/lampros/Desktop/kaggle_gpu/add_GITHUB/TMP_FOLDER/')
system("R CMD build geojsonR")
system("R CMD check --as-cran --use-valgrind geojsonR_1.0.3.tar.gz")
