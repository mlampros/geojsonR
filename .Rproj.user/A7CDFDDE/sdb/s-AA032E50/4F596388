{
    "collab_server" : "",
    "contents" : "\n\n#' secondary function for the 'geocoding_nominatim()' function\n#'\n#' @importFrom geojsonR shiny_from_JSON\n#' @keywords internal\n\naddress_geocoding_nominatim = function(streetname = NULL, housenumber = NULL, city = NULL, county = NULL,\n\n                                       state = NULL, country = NULL, postalcode = NULL) {\n\n  nominatim_query = \"http://nominatim.openstreetmap.org/search?format=json\"\n\n  STREET = \"&street=\"\n\n  flag_number = F\n\n  if (!is.null(housenumber)) {\n\n    STREET = paste0(STREET, housenumber)\n\n    flag_number = T\n  }\n\n  if (!is.null(streetname)) {\n\n    if_sep = ifelse(flag_number, \" \", \"\")\n\n    STREET = paste(STREET, streetname, sep = if_sep)\n  }\n\n  if (!is.null(streetname) || !is.null(housenumber)) {\n\n    nominatim_query = paste(nominatim_query, STREET, sep = \"\")\n  }\n\n  tmp_lst = list(city, county, state, country, postalcode)\n\n  tmp_lst_nams = c('city=', 'county=', 'state=', 'country=', 'postalcode=')\n\n  for (i in 1:length(tmp_lst)) {\n\n    if (!is.null(tmp_lst[[i]])) {\n\n      nominatim_query = paste(nominatim_query, paste(tmp_lst_nams[i], tmp_lst[[i]], sep = \"\"), sep = \"&\")\n    }\n  }\n\n  con = url(nominatim_query, method = \"libcurl\")\n\n  tmp_json = suppressWarnings(readLines(con))\n\n  if (tmp_json == \"[]\" || length(tmp_json) == 0) {               # In case that shiny closes unexpectedly check this condition, probably the resulted \"df\" is not '[]' or an empty one ( add a condition and use 'print(tmp_json)' to observe the behaviour )\n\n    cat(\"the nominatim query returns an empty array. Please, modify the initial query\", \"\\n\")\n\n    rm(con); gc()\n\n    df = data.frame(display_name = NULL)\n\n    return(df)}\n\n  else {\n\n    ex = geojsonR::shiny_from_JSON(tmp_json)\n\n    df = data.frame(do.call(rbind, lapply(ex, function(x) c(unlist(x['boundingbox']), x['display_name'], x['importance'], x['lat'], x['lon']))))\n\n    colnames(df) = c('South_LATItude', 'North_LATItude', 'West_LONGitude', 'East_LONGitude', 'display_name', 'importance', 'lat', 'lon')\n\n    df = df[order(unlist(df$importance), decreasing = T), ]\n\n    rm(con); gc()\n\n    return(df)\n  }\n}\n\n\n",
    "created" : 1490725454716.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "106948198",
    "id" : "4F596388",
    "lastKnownWriteTime" : 1489608496,
    "last_content_update" : 1489608496,
    "path" : "~/Desktop/kaggle_gpu/add_GITHUB/ShinyGeocoding/inst/shiny_geocoding/global.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 16,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}