{
    "collab_server" : "",
    "contents" : "\n#-------------------------------------------------------------------------------------------------\n\n# 1st example on how to use V8 and turf.js\n\n\nct = V8::v8()\n\nct$source(\"/home/lampros/Downloads/turf.min.js\")\n\nPATH = '/home/lampros/Downloads/GEOJSON/point.geojson'\n\nPATH1 = '/home/lampros/Downloads/GEOJSON/point1.geojson'\n\npnt1 = paste(c('var point1 =', geojsonR::Dump_From_GeoJson(PATH), ';'), collapse = \" \")\n\npnt2 = paste(c('var point2 =', geojsonR::Dump_From_GeoJson(PATH1), ';'), collapse = \" \")\n\nct$eval(pnt1)\n\nct$eval(pnt2)\n\nct$eval(\"var avg = turf.distance(point1, point2);\")\n\nct$get(\"avg\")\n#-------------------------------------------------------------------------------------------------\n\n# 2nd example on how to use V8 and turf.js [ nearest function ]\n\n\nnearst = V8::v8()\n\nnearst$source(\"/home/lampros/Downloads/turf.min.js\")\n\nPATH_point = '/home/lampros/Downloads/GEOJSON/turf_nearest.geojson'\n\nPATH_collection = '/home/lampros/Downloads/GEOJSON/turf_nearest_collection.geojson'\n\ndump_point = geojsonR::Dump_From_GeoJson(PATH_point)\n\ndump_collection = geojsonR::Dump_From_GeoJson(PATH_collection)\n\npnt = paste(c('var point =', dump_point, ';'), collapse = \" \")\n\ncollects = paste(c('var against =', dump_collection, ';'), collapse = \" \")\n\nnearst$eval(pnt)\n\nnearst$eval(collects)\n\nnearst$eval(\"var nearest = turf.nearest(point, against);\")\n\nres_nearest = nearst$get(\"nearest\")\nres_nearest\nres_nearest$properties\n\n\n#------------------------------------------------------------------------------------------------\n\n# 3rd example on how to use V8 and turf.js [ flatten function ]\n\nflat = V8::v8()\n\nflat$source(\"/home/lampros/Downloads/turf.min.js\")\n\n# dump_collection = geojsonR::Dump_From_GeoJson(\"/home/lampros/Downloads/COUNTRIES/countriesGeoJson/south africa.geojson\")\n#\n# flt = paste(c('var geometry =', dump_collection, ';'), collapse = \" \")\n\nflt = 'var geometry = {\n  \"type\": \"MultiPolygon\",\n  \"coordinates\": [\n    [[[102.0, 2.0], [103.0, 2.0], [103.0, 3.0], [102.0, 3.0], [102.0, 2.0]]],\n    [[[100.0, 0.0], [101.0, 0.0], [101.0, 1.0], [100.0, 1.0], [100.0, 0.0]],\n     [[100.2, 0.2], [100.8, 0.2], [100.8, 0.8], [100.2, 0.8], [100.2, 0.2]]]\n    ]\n};'\n\nflat$eval(flt)\n\nflat$eval(\"var flattened = turf.flatten(geometry);\")\n\nres_flat = flat$get(\"flattened\")\n\nres_flat$features$coordinates\n\navg_mean_point = apply(res_flat$features$geometry$coordinates[[1]], 3, mean)       # polygon\navg_mean_point\navg_mean_point = apply(do.call(rbind, lapply(res_flat$features$geometry$coordinates, function(x) apply(x, 3, mean))), 2, mean)   # multi-polygon\navg_mean_point\n\n#------------------------------------------------------------------------------------------------\n\n# 4th example on how to convert a 'polygon' or 'multi-polygon' to 'average-point' [ using turf, mongolite, geojsonR ]\n\nlibrary(mongolite)\n\nflat = V8::v8()\n\nflat$source(\"/home/lampros/Downloads/turf.min.js\")\n\ninit = Return_GeoJson$new()       # initialize geojsonR\n\nADD_mongo2 = mongo(\"mongo_avg2\")\n\njson_files = list.files('/home/lampros/Downloads/COUNTRIES/countriesGeoJson', full.names = T)\n\nfor (i in 1:length(json_files)) {\n\n  dump_collection = geojsonR::Dump_From_GeoJson(json_files[i])\n\n  flt = paste(c('var geometry =', dump_collection, ';'), collapse = \" \")\n\n  flat$eval(flt)\n\n  flat$eval(\"var flattened = turf.flatten(geometry);\")\n\n  res_flat = flat$get(\"flattened\")\n\n  if (res_flat$features$geometry$type == \"Polygon\") {\n\n    if (inherits(res_flat$features$geometry$coordinates[[1]], \"array\")) {\n\n      avg_mean_point = apply(res_flat$features$geometry$coordinates[[1]], 3, mean)}\n\n    else {\n\n      avg_mean_point = apply(do.call(rbind, unlist(res_flat$features$geometry$coordinates, recursive = F)), 2, mean)\n    }\n  }\n\n  if (res_flat$features$geometry$type == \"MultiPolygon\") {\n\n    avg_mean_point = apply(do.call(rbind, lapply(res_flat$features$geometry$coordinates, function(x) apply(x, 3, mean))), 2, mean)\n  }\n\n  #avg_mean_point = apply(do.call(rbind, lapply(res_flat$features$geometry$coordinates, function(x) apply(x, 3, mean))), 2, mean)\n\n  feature_pnt = list(id = i, geometry = list(Point = c(avg_mean_point[1], avg_mean_point[2])), properties = list(name = res_flat$features$properties$name))\n\n  ADD_mongo2$insert(feature_pnt)\n}\n\n\nalldata = ADD_mongo2$find('{}')\nstr(alldata)\n\n#----------------------------------------------------------------\n# returns the countries of the mongolite-data.frame\n# as.vector(apply(alldata$properties, 1, function(x) x[[1]][1]))\n#----------------------------------------------------------------\n\n#------------------------------------------------------------------------------------------------\n\n# subs2 = ADD_mongo2$find(query =\n#                        '{\n#   \"Point\":\n#   { \"$geoIntersects\" :\n#   {\n#     \"$geometry\" : { \"type\" : \"Point\",\n#  \"coordinates\": [67.69109, 34.80365] } } } }'\n# )\n\n\n#------------------------------------------------------------------------------------------------\n\n# the same as in the 4th example can be done with the geojsonR::read_GeoJson\n\na = geojsonR::read_GeoJson('/home/lampros/Downloads/GEOJSON/multi_polygon_turf.geojson')\n\n\n# and then extract a single data.frame using the following function\n\nfunc = function(sub_lst) {\n\n  if (!is.null(dim(sub_lst))) {              # if sublist is data.frame return the sublist\n\n    return(sub_lst)\n  }\n\n  else {\n\n    return(do.call(rbind, sub_lst))          # else first rbind and then return the data.frame\n  }\n}\n\n\ndo.call(rbind, lapply(a$coordinates, func))       # returns a 'flattened' single data.frame from list [ Multi-polygon ]\n\n\n#------------------------------------------------------------------------------------------------\n",
    "created" : 1488737558187.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3933771983",
    "id" : "EC6E5C73",
    "lastKnownWriteTime" : 1488960003,
    "last_content_update" : 1488960003568,
    "path" : "~/Videos/turf.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}