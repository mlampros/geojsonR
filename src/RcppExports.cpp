// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// export_From_geojson
Rcpp::List export_From_geojson(std::string input_file, bool flatten_coords, bool average_coordinates, bool to_list);
RcppExport SEXP _geojsonR_export_From_geojson(SEXP input_fileSEXP, SEXP flatten_coordsSEXP, SEXP average_coordinatesSEXP, SEXP to_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type flatten_coords(flatten_coordsSEXP);
    Rcpp::traits::input_parameter< bool >::type average_coordinates(average_coordinatesSEXP);
    Rcpp::traits::input_parameter< bool >::type to_list(to_listSEXP);
    rcpp_result_gen = Rcpp::wrap(export_From_geojson(input_file, flatten_coords, average_coordinates, to_list));
    return rcpp_result_gen;
END_RCPP
}
// export_From_JSON
SEXP export_From_JSON(std::string input_file);
RcppExport SEXP _geojsonR_export_From_JSON(SEXP input_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(export_From_JSON(input_file));
    return rcpp_result_gen;
END_RCPP
}
// dump_geojson
std::string dump_geojson(std::string input_data);
RcppExport SEXP _geojsonR_dump_geojson(SEXP input_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_data(input_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_geojson(input_data));
    return rcpp_result_gen;
END_RCPP
}
// Features_TO_Collection
std::string Features_TO_Collection(std::vector<std::string> feat_files_lst, std::vector<double> bbox_vec, bool verbose);
RcppExport SEXP _geojsonR_Features_TO_Collection(SEXP feat_files_lstSEXP, SEXP bbox_vecSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type feat_files_lst(feat_files_lstSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bbox_vec(bbox_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Features_TO_Collection(feat_files_lst, bbox_vec, verbose));
    return rcpp_result_gen;
END_RCPP
}
// export_From_geojson_schema
Rcpp::List export_From_geojson_schema(std::string input_file, std::string GEOMETRY_OBJECT_NAME, bool average_coordinates, bool to_list);
RcppExport SEXP _geojsonR_export_From_geojson_schema(SEXP input_fileSEXP, SEXP GEOMETRY_OBJECT_NAMESEXP, SEXP average_coordinatesSEXP, SEXP to_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type GEOMETRY_OBJECT_NAME(GEOMETRY_OBJECT_NAMESEXP);
    Rcpp::traits::input_parameter< bool >::type average_coordinates(average_coordinatesSEXP);
    Rcpp::traits::input_parameter< bool >::type to_list(to_listSEXP);
    rcpp_result_gen = Rcpp::wrap(export_From_geojson_schema(input_file, GEOMETRY_OBJECT_NAME, average_coordinates, to_list));
    return rcpp_result_gen;
END_RCPP
}
// list_files
std::vector<std::string> list_files(const std::string& path, bool full_path);
RcppExport SEXP _geojsonR_list_files(SEXP pathSEXP, SEXP full_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type path(pathSEXP);
    Rcpp::traits::input_parameter< bool >::type full_path(full_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(list_files(path, full_path));
    return rcpp_result_gen;
END_RCPP
}
// merge_json
void merge_json(const std::string& input_folder, std::string output_file, std::string concat_delimiter, bool verbose);
RcppExport SEXP _geojsonR_merge_json(SEXP input_folderSEXP, SEXP output_fileSEXP, SEXP concat_delimiterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type input_folder(input_folderSEXP);
    Rcpp::traits::input_parameter< std::string >::type output_file(output_fileSEXP);
    Rcpp::traits::input_parameter< std::string >::type concat_delimiter(concat_delimiterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    merge_json(input_folder, output_file, concat_delimiter, verbose);
    return R_NilValue;
END_RCPP
}
// DATA_TYPE
std::string DATA_TYPE(SEXP sublist);
RcppExport SEXP _geojsonR_DATA_TYPE(SEXP sublistSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sublist(sublistSEXP);
    rcpp_result_gen = Rcpp::wrap(DATA_TYPE(sublist));
    return rcpp_result_gen;
END_RCPP
}
// inner_coords
std::string inner_coords(Rcpp::List geom_lst, int z, bool polygon_interior);
RcppExport SEXP _geojsonR_inner_coords(SEXP geom_lstSEXP, SEXP zSEXP, SEXP polygon_interiorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type geom_lst(geom_lstSEXP);
    Rcpp::traits::input_parameter< int >::type z(zSEXP);
    Rcpp::traits::input_parameter< bool >::type polygon_interior(polygon_interiorSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_coords(geom_lst, z, polygon_interior));
    return rcpp_result_gen;
END_RCPP
}
// Polygon_with_interior_rings
std::string Polygon_with_interior_rings(Rcpp::List geom_lst, int i, bool verbose);
RcppExport SEXP _geojsonR_Polygon_with_interior_rings(SEXP geom_lstSEXP, SEXP iSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type geom_lst(geom_lstSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Polygon_with_interior_rings(geom_lst, i, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SAVE_R_list_Features_2_FeatureCollection
std::string SAVE_R_list_Features_2_FeatureCollection(Rcpp::List x, std::string path_to_file, bool verbose);
RcppExport SEXP _geojsonR_SAVE_R_list_Features_2_FeatureCollection(SEXP xSEXP, SEXP path_to_fileSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type path_to_file(path_to_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SAVE_R_list_Features_2_FeatureCollection(x, path_to_file, verbose));
    return rcpp_result_gen;
END_RCPP
}
// export_To_GeoJson
Rcpp::List export_To_GeoJson(std::string geometry_object, std::vector<double> data_POINTS, std::vector<std::vector<double>> data_ARRAYS, std::vector<std::vector<std::vector<double>>> data_ARRAY_ARRAYS, std::vector<std::vector<std::vector<std::vector<double>>>> data_POLYGON_ARRAYS, bool stringify);
RcppExport SEXP _geojsonR_export_To_GeoJson(SEXP geometry_objectSEXP, SEXP data_POINTSSEXP, SEXP data_ARRAYSSEXP, SEXP data_ARRAY_ARRAYSSEXP, SEXP data_POLYGON_ARRAYSSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geometry_object(geometry_objectSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type data_POINTS(data_POINTSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type data_ARRAYS(data_ARRAYSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<double>>> >::type data_ARRAY_ARRAYS(data_ARRAY_ARRAYSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<std::vector<double>>>> >::type data_POLYGON_ARRAYS(data_POLYGON_ARRAYSSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(export_To_GeoJson(geometry_object, data_POINTS, data_ARRAYS, data_ARRAY_ARRAYS, data_POLYGON_ARRAYS, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Geom_Collection
Rcpp::List Geom_Collection(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP _geojsonR_Geom_Collection(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Geom_Collection(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Feature_Obj
Rcpp::List Feature_Obj(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP _geojsonR_Feature_Obj(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Feature_Obj(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Feature_collection_Obj
Rcpp::List Feature_collection_Obj(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP _geojsonR_Feature_collection_Obj(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Feature_collection_Obj(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
