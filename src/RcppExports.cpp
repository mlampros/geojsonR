// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// export_From_geojson
Rcpp::List export_From_geojson(std::string input_file, bool flatten_coords, bool average_coordinates);
RcppExport SEXP geojsonR_export_From_geojson(SEXP input_fileSEXP, SEXP flatten_coordsSEXP, SEXP average_coordinatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    Rcpp::traits::input_parameter< bool >::type flatten_coords(flatten_coordsSEXP);
    Rcpp::traits::input_parameter< bool >::type average_coordinates(average_coordinatesSEXP);
    rcpp_result_gen = Rcpp::wrap(export_From_geojson(input_file, flatten_coords, average_coordinates));
    return rcpp_result_gen;
END_RCPP
}
// export_From_JSON
SEXP export_From_JSON(std::string input_file);
RcppExport SEXP geojsonR_export_From_JSON(SEXP input_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_file(input_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(export_From_JSON(input_file));
    return rcpp_result_gen;
END_RCPP
}
// dump_geojson
std::string dump_geojson(std::string input_data);
RcppExport SEXP geojsonR_dump_geojson(SEXP input_dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type input_data(input_dataSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_geojson(input_data));
    return rcpp_result_gen;
END_RCPP
}
// Features_TO_Collection
std::string Features_TO_Collection(std::vector<std::string> feat_files_lst, std::vector<double> bbox_vec);
RcppExport SEXP geojsonR_Features_TO_Collection(SEXP feat_files_lstSEXP, SEXP bbox_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type feat_files_lst(feat_files_lstSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type bbox_vec(bbox_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(Features_TO_Collection(feat_files_lst, bbox_vec));
    return rcpp_result_gen;
END_RCPP
}
// export_To_GeoJson
Rcpp::List export_To_GeoJson(std::string geometry_object, std::vector<double> data_POINTS, std::vector<std::vector<double>> data_ARRAYS, std::vector<std::vector<std::vector<double>>> data_ARRAY_ARRAYS, std::vector<std::vector<std::vector<std::vector<double>>>> data_POLYGON_ARRAYS, bool stringify);
RcppExport SEXP geojsonR_export_To_GeoJson(SEXP geometry_objectSEXP, SEXP data_POINTSSEXP, SEXP data_ARRAYSSEXP, SEXP data_ARRAY_ARRAYSSEXP, SEXP data_POLYGON_ARRAYSSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type geometry_object(geometry_objectSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type data_POINTS(data_POINTSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<double>> >::type data_ARRAYS(data_ARRAYSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<double>>> >::type data_ARRAY_ARRAYS(data_ARRAY_ARRAYSSEXP);
    Rcpp::traits::input_parameter< std::vector<std::vector<std::vector<std::vector<double>>>> >::type data_POLYGON_ARRAYS(data_POLYGON_ARRAYSSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(export_To_GeoJson(geometry_object, data_POINTS, data_ARRAYS, data_ARRAY_ARRAYS, data_POLYGON_ARRAYS, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Geom_Collection
Rcpp::List Geom_Collection(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP geojsonR_Geom_Collection(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Geom_Collection(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Feature_Obj
Rcpp::List Feature_Obj(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP geojsonR_Feature_Obj(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Feature_Obj(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
// Feature_collection_Obj
Rcpp::List Feature_collection_Obj(std::vector<std::string> geometry_object_names, Rcpp::List geometry_objects, bool stringify);
RcppExport SEXP geojsonR_Feature_collection_Obj(SEXP geometry_object_namesSEXP, SEXP geometry_objectsSEXP, SEXP stringifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type geometry_object_names(geometry_object_namesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type geometry_objects(geometry_objectsSEXP);
    Rcpp::traits::input_parameter< bool >::type stringify(stringifySEXP);
    rcpp_result_gen = Rcpp::wrap(Feature_collection_Obj(geometry_object_names, geometry_objects, stringify));
    return rcpp_result_gen;
END_RCPP
}
